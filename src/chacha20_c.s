# Task: Write your own chacha20 algorithm implementation and replace
# the existing code generated by GCC 14.2 with rv64gc.
	.text
	.align	1
	.globl	chacha20
	.type	chacha20, @function
chacha20:
.LFB0:
	addi	sp,sp,-160	#,,
	sd	s6,104(sp)	#,
	sd	s0,152(sp)	#,
	sd	s1,144(sp)	#,
	sd	s2,136(sp)	#,
	sd	s3,128(sp)	#,
	sd	s4,120(sp)	#,
	sd	s5,112(sp)	#,
	sd	s7,96(sp)	#,
	sd	s8,88(sp)	#,
	sd	s9,80(sp)	#,
	sd	s10,72(sp)	#,
	andi	a5,a1,7	#, andmask_506, input
# chacha20_c.c:31: {
	mv	s6,a0	# output, tmp735
	bne	a5,zero,.L2	#, andmask_506,,
# chacha20_c.c:36:         x[i] = input[i];
	ld	t1,0(a1)		# MEM <const vector(2) unsigned int> [(const u32 *)input_131(D)], MEM <const vector(2) unsigned int> [(const u32 *)input_131(D)]
	ld	a7,8(a1)		# MEM <const vector(2) unsigned int> [(const u32 *)input_131(D) + 8B], MEM <const vector(2) unsigned int> [(const u32 *)input_131(D) + 8B]
	ld	a6,16(a1)		# MEM <const vector(2) unsigned int> [(const u32 *)input_131(D) + 16B], MEM <const vector(2) unsigned int> [(const u32 *)input_131(D) + 16B]
	ld	a0,24(a1)		# MEM <const vector(2) unsigned int> [(const u32 *)input_131(D) + 24B], MEM <const vector(2) unsigned int> [(const u32 *)input_131(D) + 24B]
	ld	a2,32(a1)		# MEM <const vector(2) unsigned int> [(const u32 *)input_131(D) + 32B], MEM <const vector(2) unsigned int> [(const u32 *)input_131(D) + 32B]
	ld	a3,40(a1)		# MEM <const vector(2) unsigned int> [(const u32 *)input_131(D) + 40B], MEM <const vector(2) unsigned int> [(const u32 *)input_131(D) + 40B]
	ld	a4,48(a1)		# MEM <const vector(2) unsigned int> [(const u32 *)input_131(D) + 48B], MEM <const vector(2) unsigned int> [(const u32 *)input_131(D) + 48B]
	ld	a5,56(a1)		# MEM <const vector(2) unsigned int> [(const u32 *)input_131(D) + 56B], MEM <const vector(2) unsigned int> [(const u32 *)input_131(D) + 56B]
	lw	s7,0(a1)		# *input_131(D), *input_131(D)
	sd	t1,0(sp)	# MEM <const vector(2) unsigned int> [(const u32 *)input_131(D)], MEM <vector(2) unsigned int> [(unsigned int *)&x]
	sd	a7,8(sp)	# MEM <const vector(2) unsigned int> [(const u32 *)input_131(D) + 8B], MEM <vector(2) unsigned int> [(unsigned int *)&x + 8B]
	sd	a6,16(sp)	# MEM <const vector(2) unsigned int> [(const u32 *)input_131(D) + 16B], MEM <vector(2) unsigned int> [(unsigned int *)&x + 16B]
	sd	a0,24(sp)	# MEM <const vector(2) unsigned int> [(const u32 *)input_131(D) + 24B], MEM <vector(2) unsigned int> [(unsigned int *)&x + 24B]
	sd	a2,32(sp)	# MEM <const vector(2) unsigned int> [(const u32 *)input_131(D) + 32B], MEM <vector(2) unsigned int> [(unsigned int *)&x + 32B]
	sd	a3,40(sp)	# MEM <const vector(2) unsigned int> [(const u32 *)input_131(D) + 40B], MEM <vector(2) unsigned int> [(unsigned int *)&x + 40B]
	sd	a4,48(sp)	# MEM <const vector(2) unsigned int> [(const u32 *)input_131(D) + 48B], MEM <vector(2) unsigned int> [(unsigned int *)&x + 48B]
	sd	a5,56(sp)	# MEM <const vector(2) unsigned int> [(const u32 *)input_131(D) + 56B], MEM <vector(2) unsigned int> [(unsigned int *)&x + 56B]
.L3:
	lw	s4,0(sp)		# x_I_lsm.5, x[0]
	lw	t1,16(sp)		# x_I_lsm.6, x[4]
	lw	a2,48(sp)		# x_I_lsm.7, x[12]
	lw	t3,32(sp)		# x_I_lsm.8, x[8]
	lw	s3,4(sp)		# x_I_lsm.9, x[1]
	lw	a7,20(sp)		# x_I_lsm.10, x[5]
	lw	a3,52(sp)		# x_I_lsm.11, x[13]
	lw	s1,36(sp)		# x_I_lsm.12, x[9]
	lw	s2,8(sp)		# x_I_lsm.13, x[2]
	lw	a6,24(sp)		# x_I_lsm.14, x[6]
	lw	a4,56(sp)		# x_I_lsm.15, x[14]
	lw	s0,40(sp)		# x_I_lsm.16, x[10]
	lw	s5,12(sp)		# x_I_lsm.17, x[3]
	lw	a0,28(sp)		# x_I_lsm.18, x[7]
	lw	a5,60(sp)		# x_I_lsm.19, x[15]
	lw	t5,44(sp)		# x_I_lsm.20, x[11]
# chacha20_c.c:31: {
	li	t4,10		# ivtmp_606,
.L4:
# chacha20_c.c:40:         QUARTERROUND(0, 4, 8, 12);
	addw	s4,t1,s4	# x_I_lsm.5, tmp317, x_I_lsm.6
# chacha20_c.c:41:         QUARTERROUND(1, 5, 9, 13);
	addw	s3,a7,s3	# x_I_lsm.9, tmp361, x_I_lsm.10
# chacha20_c.c:42:         QUARTERROUND(2, 6, 10, 14);
	addw	s2,s2,a6	# x_I_lsm.14, tmp405, x_I_lsm.13
# chacha20_c.c:43:         QUARTERROUND(3, 7, 11, 15);
	addw	s5,a0,s5	# x_I_lsm.17, tmp449, x_I_lsm.18
# chacha20_c.c:40:         QUARTERROUND(0, 4, 8, 12);
	xor	a2,s4,a2	# x_I_lsm.7, tmp320, tmp317
# chacha20_c.c:41:         QUARTERROUND(1, 5, 9, 13);
	xor	a3,s3,a3	# x_I_lsm.11, tmp364, tmp361
# chacha20_c.c:42:         QUARTERROUND(2, 6, 10, 14);
	xor	a4,s2,a4	# x_I_lsm.15, tmp408, tmp405
# chacha20_c.c:43:         QUARTERROUND(3, 7, 11, 15);
	xor	a5,s5,a5	# x_I_lsm.19, tmp452, tmp449
	srliw	s8,a5,16	# tmp455, tmp452,
# chacha20_c.c:41:         QUARTERROUND(1, 5, 9, 13);
	srliw	t2,a3,16	# tmp367, tmp364,
# chacha20_c.c:40:         QUARTERROUND(0, 4, 8, 12);
	srliw	t0,a2,16	# tmp323, tmp320,
# chacha20_c.c:42:         QUARTERROUND(2, 6, 10, 14);
	srliw	t6,a4,16	# tmp411, tmp408,
# chacha20_c.c:40:         QUARTERROUND(0, 4, 8, 12);
	slliw	a2,a2,16	#, tmp325, tmp320
# chacha20_c.c:42:         QUARTERROUND(2, 6, 10, 14);
	slliw	a4,a4,16	#, tmp413, tmp408
# chacha20_c.c:41:         QUARTERROUND(1, 5, 9, 13);
	slliw	a3,a3,16	#, tmp369, tmp364
# chacha20_c.c:43:         QUARTERROUND(3, 7, 11, 15);
	slliw	a5,a5,16	#, tmp457, tmp452
# chacha20_c.c:40:         QUARTERROUND(0, 4, 8, 12);
	or	t0,t0,a2	# tmp325, _10, tmp323
# chacha20_c.c:43:         QUARTERROUND(3, 7, 11, 15);
	or	a5,s8,a5	# tmp457, _58, tmp455
# chacha20_c.c:42:         QUARTERROUND(2, 6, 10, 14);
	or	t6,t6,a4	# tmp413, _42, tmp411
# chacha20_c.c:41:         QUARTERROUND(1, 5, 9, 13);
	or	a4,t2,a3	# tmp369, _26, tmp367
# chacha20_c.c:40:         QUARTERROUND(0, 4, 8, 12);
	addw	t3,t0,t3	# x_I_lsm.8, tmp328, _10
# chacha20_c.c:43:         QUARTERROUND(3, 7, 11, 15);
	addw	t2,a5,t5	# x_I_lsm.20, tmp460, _58
# chacha20_c.c:42:         QUARTERROUND(2, 6, 10, 14);
	addw	s0,t6,s0	# x_I_lsm.16, tmp416, _42
# chacha20_c.c:41:         QUARTERROUND(1, 5, 9, 13);
	addw	s1,a4,s1	# x_I_lsm.12, tmp372, _26
# chacha20_c.c:40:         QUARTERROUND(0, 4, 8, 12);
	xor	t1,t3,t1	# x_I_lsm.6, tmp331, tmp328
# chacha20_c.c:43:         QUARTERROUND(3, 7, 11, 15);
	xor	a0,t2,a0	# x_I_lsm.18, tmp463, tmp460
# chacha20_c.c:42:         QUARTERROUND(2, 6, 10, 14);
	xor	a6,s0,a6	# x_I_lsm.14, tmp419, tmp416
# chacha20_c.c:41:         QUARTERROUND(1, 5, 9, 13);
	xor	a7,s1,a7	# x_I_lsm.10, tmp375, tmp372
# chacha20_c.c:42:         QUARTERROUND(2, 6, 10, 14);
	srliw	s8,a6,20	# tmp422, tmp419,
# chacha20_c.c:41:         QUARTERROUND(1, 5, 9, 13);
	srliw	a3,a7,20	# tmp378, tmp375,
# chacha20_c.c:40:         QUARTERROUND(0, 4, 8, 12);
	srliw	t5,t1,20	# tmp334, tmp331,
# chacha20_c.c:43:         QUARTERROUND(3, 7, 11, 15);
	srliw	a2,a0,20	# tmp466, tmp463,
# chacha20_c.c:40:         QUARTERROUND(0, 4, 8, 12);
	slliw	t1,t1,12	#, tmp336, tmp331
# chacha20_c.c:43:         QUARTERROUND(3, 7, 11, 15);
	slliw	a0,a0,12	#, tmp468, tmp463
# chacha20_c.c:42:         QUARTERROUND(2, 6, 10, 14);
	slliw	a6,a6,12	#, tmp424, tmp419
# chacha20_c.c:41:         QUARTERROUND(1, 5, 9, 13);
	slliw	a7,a7,12	#, tmp380, tmp375
# chacha20_c.c:40:         QUARTERROUND(0, 4, 8, 12);
	or	t5,t5,t1	# tmp336, _14, tmp334
# chacha20_c.c:43:         QUARTERROUND(3, 7, 11, 15);
	or	a2,a2,a0	# tmp468, _62, tmp466
# chacha20_c.c:42:         QUARTERROUND(2, 6, 10, 14);
	or	a0,s8,a6	# tmp424, _46, tmp422
# chacha20_c.c:41:         QUARTERROUND(1, 5, 9, 13);
	or	a6,a3,a7	# tmp380, _30, tmp378
# chacha20_c.c:40:         QUARTERROUND(0, 4, 8, 12);
	addw	s4,s4,t5	# _14, tmp339, tmp317
# chacha20_c.c:43:         QUARTERROUND(3, 7, 11, 15);
	addw	s5,s5,a2	# _62, tmp471, tmp449
# chacha20_c.c:42:         QUARTERROUND(2, 6, 10, 14);
	addw	s2,s2,a0	# _46, tmp427, tmp405
# chacha20_c.c:41:         QUARTERROUND(1, 5, 9, 13);
	addw	s3,s3,a6	# _30, tmp383, tmp361
# chacha20_c.c:43:         QUARTERROUND(3, 7, 11, 15);
	xor	a5,a5,s5	# tmp471, tmp474, _58
# chacha20_c.c:41:         QUARTERROUND(1, 5, 9, 13);
	xor	a4,a4,s3	# tmp383, tmp386, _26
# chacha20_c.c:40:         QUARTERROUND(0, 4, 8, 12);
	xor	t0,t0,s4	# tmp339, tmp342, _10
# chacha20_c.c:42:         QUARTERROUND(2, 6, 10, 14);
	xor	t6,t6,s2	# tmp427, tmp430, _42
# chacha20_c.c:40:         QUARTERROUND(0, 4, 8, 12);
	srliw	s9,t0,24	# tmp345, tmp342,
# chacha20_c.c:41:         QUARTERROUND(1, 5, 9, 13);
	srliw	s8,a4,24	# tmp389, tmp386,
	slliw	a7,a4,8	#, tmp391, tmp386
# chacha20_c.c:43:         QUARTERROUND(3, 7, 11, 15);
	slliw	s10,a5,8	#, tmp479, tmp474
# chacha20_c.c:40:         QUARTERROUND(0, 4, 8, 12);
	slliw	t0,t0,8	#, tmp347, tmp342
# chacha20_c.c:42:         QUARTERROUND(2, 6, 10, 14);
	srliw	t1,t6,24	# tmp433, tmp430,
# chacha20_c.c:43:         QUARTERROUND(3, 7, 11, 15);
	srliw	a3,a5,24	# tmp477, tmp474,
# chacha20_c.c:42:         QUARTERROUND(2, 6, 10, 14);
	slliw	t6,t6,8	#, tmp435, tmp430
# chacha20_c.c:40:         QUARTERROUND(0, 4, 8, 12);
	or	a4,s9,t0	# tmp347, _17, tmp345
# chacha20_c.c:41:         QUARTERROUND(1, 5, 9, 13);
	or	a5,s8,a7	# tmp391, _33, tmp389
# chacha20_c.c:42:         QUARTERROUND(2, 6, 10, 14);
	or	t1,t1,t6	# tmp435, _49, tmp433
# chacha20_c.c:43:         QUARTERROUND(3, 7, 11, 15);
	or	a3,a3,s10	# tmp479, _65, tmp477
	addw	t6,t2,a3	# _65, tmp482, tmp460
# chacha20_c.c:40:         QUARTERROUND(0, 4, 8, 12);
	addw	t3,t3,a4	# _17, tmp350, tmp328
# chacha20_c.c:42:         QUARTERROUND(2, 6, 10, 14);
	addw	s0,s0,t1	# _49, tmp438, tmp416
# chacha20_c.c:41:         QUARTERROUND(1, 5, 9, 13);
	addw	s1,s1,a5	# _33, tmp394, tmp372
# chacha20_c.c:40:         QUARTERROUND(0, 4, 8, 12);
	xor	t5,t5,t3	# tmp350, tmp353, _14
# chacha20_c.c:42:         QUARTERROUND(2, 6, 10, 14);
	xor	a0,a0,s0	# tmp438, tmp441, _46
# chacha20_c.c:41:         QUARTERROUND(1, 5, 9, 13);
	xor	a6,a6,s1	# tmp394, tmp397, _30
# chacha20_c.c:43:         QUARTERROUND(3, 7, 11, 15);
	xor	a2,a2,t6	# tmp482, tmp485, _62
# chacha20_c.c:41:         QUARTERROUND(1, 5, 9, 13);
	srliw	s8,a6,25	# tmp400, tmp397,
# chacha20_c.c:42:         QUARTERROUND(2, 6, 10, 14);
	srliw	t2,a0,25	# tmp444, tmp441,
# chacha20_c.c:43:         QUARTERROUND(3, 7, 11, 15);
	srliw	t0,a2,25	# tmp488, tmp485,
# chacha20_c.c:40:         QUARTERROUND(0, 4, 8, 12);
	srliw	a7,t5,25	# tmp356, tmp353,
# chacha20_c.c:41:         QUARTERROUND(1, 5, 9, 13);
	slliw	a6,a6,7	#, tmp402, tmp397
# chacha20_c.c:40:         QUARTERROUND(0, 4, 8, 12);
	slliw	t5,t5,7	#, tmp358, tmp353
# chacha20_c.c:42:         QUARTERROUND(2, 6, 10, 14);
	slliw	a0,a0,7	#, tmp446, tmp441
# chacha20_c.c:43:         QUARTERROUND(3, 7, 11, 15);
	slliw	a2,a2,7	#, tmp490, tmp485
# chacha20_c.c:40:         QUARTERROUND(0, 4, 8, 12);
	or	a7,a7,t5	# tmp358, _20, tmp356
# chacha20_c.c:41:         QUARTERROUND(1, 5, 9, 13);
	or	a6,s8,a6	# tmp402, _36, tmp400
# chacha20_c.c:42:         QUARTERROUND(2, 6, 10, 14);
	or	a0,t2,a0	# tmp446, _52, tmp444
# chacha20_c.c:43:         QUARTERROUND(3, 7, 11, 15);
	or	a2,t0,a2	# tmp490, _68, tmp488
# chacha20_c.c:47:         QUARTERROUND(3, 4, 9, 14);
	addw	s5,a7,s5	# tmp471, tmp625, _20
# chacha20_c.c:44:         QUARTERROUND(0, 5, 10, 15);
	addw	s4,s4,a6	# _36, tmp493, tmp339
# chacha20_c.c:45:         QUARTERROUND(1, 6, 11, 12);
	addw	s3,s3,a0	# _52, tmp537, tmp383
# chacha20_c.c:46:         QUARTERROUND(2, 7, 8, 13);
	addw	s2,s2,a2	# _68, tmp581, tmp427
# chacha20_c.c:47:         QUARTERROUND(3, 4, 9, 14);
	xor	t1,t1,s5	# tmp625, tmp628, _49
# chacha20_c.c:44:         QUARTERROUND(0, 5, 10, 15);
	xor	a3,a3,s4	# tmp493, tmp496, _65
# chacha20_c.c:45:         QUARTERROUND(1, 6, 11, 12);
	xor	a4,a4,s3	# tmp537, tmp540, _17
# chacha20_c.c:46:         QUARTERROUND(2, 7, 8, 13);
	xor	a5,a5,s2	# tmp581, tmp584, _33
# chacha20_c.c:44:         QUARTERROUND(0, 5, 10, 15);
	srliw	s8,a3,16	# tmp499, tmp496,
# chacha20_c.c:45:         QUARTERROUND(1, 6, 11, 12);
	srliw	t2,a4,16	# tmp543, tmp540,
# chacha20_c.c:46:         QUARTERROUND(2, 7, 8, 13);
	srliw	t5,a5,16	# tmp587, tmp584,
# chacha20_c.c:47:         QUARTERROUND(3, 4, 9, 14);
	srliw	t0,t1,16	# tmp631, tmp628,
# chacha20_c.c:44:         QUARTERROUND(0, 5, 10, 15);
	slliw	a3,a3,16	#, tmp501, tmp496
# chacha20_c.c:47:         QUARTERROUND(3, 4, 9, 14);
	slliw	t1,t1,16	#, tmp633, tmp628
# chacha20_c.c:45:         QUARTERROUND(1, 6, 11, 12);
	slliw	a4,a4,16	#, tmp545, tmp540
# chacha20_c.c:46:         QUARTERROUND(2, 7, 8, 13);
	slliw	a5,a5,16	#, tmp589, tmp584
# chacha20_c.c:47:         QUARTERROUND(3, 4, 9, 14);
	or	t0,t0,t1	# tmp633, _107, tmp631
# chacha20_c.c:44:         QUARTERROUND(0, 5, 10, 15);
	or	a3,s8,a3	# tmp501, _71, tmp499
# chacha20_c.c:45:         QUARTERROUND(1, 6, 11, 12);
	or	a4,t2,a4	# tmp545, _83, tmp543
# chacha20_c.c:46:         QUARTERROUND(2, 7, 8, 13);
	or	a5,t5,a5	# tmp589, _95, tmp587
	addw	t1,t3,a5	# _95, tmp592, tmp350
# chacha20_c.c:45:         QUARTERROUND(1, 6, 11, 12);
	addw	t5,t6,a4	# _83, tmp548, tmp482
# chacha20_c.c:47:         QUARTERROUND(3, 4, 9, 14);
	addw	s1,s1,t0	# _107, tmp636, tmp394
# chacha20_c.c:44:         QUARTERROUND(0, 5, 10, 15);
	addw	s0,s0,a3	# _71, tmp504, tmp438
# chacha20_c.c:45:         QUARTERROUND(1, 6, 11, 12);
	xor	a0,a0,t5	# tmp548, tmp551, _52
# chacha20_c.c:47:         QUARTERROUND(3, 4, 9, 14);
	xor	a7,a7,s1	# tmp636, tmp639, _20
# chacha20_c.c:44:         QUARTERROUND(0, 5, 10, 15);
	xor	a6,a6,s0	# tmp504, tmp507, _36
# chacha20_c.c:46:         QUARTERROUND(2, 7, 8, 13);
	xor	a2,a2,t1	# tmp592, tmp595, _68
# chacha20_c.c:47:         QUARTERROUND(3, 4, 9, 14);
	srliw	s9,a7,20	# tmp642, tmp639,
# chacha20_c.c:44:         QUARTERROUND(0, 5, 10, 15);
	srliw	s8,a6,20	# tmp510, tmp507,
# chacha20_c.c:45:         QUARTERROUND(1, 6, 11, 12);
	srliw	t2,a0,20	# tmp554, tmp551,
	slliw	t3,a0,12	#, tmp556, tmp551
# chacha20_c.c:47:         QUARTERROUND(3, 4, 9, 14);
	slliw	a7,a7,12	#, tmp644, tmp639
# chacha20_c.c:46:         QUARTERROUND(2, 7, 8, 13);
	srliw	t6,a2,20	# tmp598, tmp595,
# chacha20_c.c:44:         QUARTERROUND(0, 5, 10, 15);
	slliw	a6,a6,12	#, tmp512, tmp507
# chacha20_c.c:46:         QUARTERROUND(2, 7, 8, 13);
	slliw	a2,a2,12	#, tmp600, tmp595
# chacha20_c.c:47:         QUARTERROUND(3, 4, 9, 14);
	or	a0,s9,a7	# tmp644, _110, tmp642
# chacha20_c.c:44:         QUARTERROUND(0, 5, 10, 15);
	or	a6,s8,a6	# tmp512, _74, tmp510
# chacha20_c.c:45:         QUARTERROUND(1, 6, 11, 12);
	or	a7,t2,t3	# tmp556, _86, tmp554
# chacha20_c.c:46:         QUARTERROUND(2, 7, 8, 13);
	or	t6,t6,a2	# tmp600, _98, tmp598
# chacha20_c.c:47:         QUARTERROUND(3, 4, 9, 14);
	addw	s5,s5,a0	# _110, x_I_lsm.17, tmp625
# chacha20_c.c:44:         QUARTERROUND(0, 5, 10, 15);
	addw	s4,s4,a6	# _74, x_I_lsm.5, tmp493
# chacha20_c.c:45:         QUARTERROUND(1, 6, 11, 12);
	addw	s3,s3,a7	# _86, x_I_lsm.9, tmp537
# chacha20_c.c:46:         QUARTERROUND(2, 7, 8, 13);
	addw	s2,s2,t6	# _98, x_I_lsm.13, tmp581
# chacha20_c.c:45:         QUARTERROUND(1, 6, 11, 12);
	xor	a4,a4,s3	# x_I_lsm.9, tmp562, _83
# chacha20_c.c:46:         QUARTERROUND(2, 7, 8, 13);
	xor	a5,a5,s2	# x_I_lsm.13, tmp606, _95
# chacha20_c.c:47:         QUARTERROUND(3, 4, 9, 14);
	xor	t0,t0,s5	# x_I_lsm.17, tmp650, _107
# chacha20_c.c:44:         QUARTERROUND(0, 5, 10, 15);
	xor	a3,a3,s4	# x_I_lsm.5, tmp518, _71
	srliw	s9,a3,24	# tmp521, tmp518,
# chacha20_c.c:45:         QUARTERROUND(1, 6, 11, 12);
	slliw	t2,a4,8	#, tmp567, tmp562
# chacha20_c.c:46:         QUARTERROUND(2, 7, 8, 13);
	srliw	s8,a5,24	# tmp609, tmp606,
	slliw	t3,a5,8	#, tmp611, tmp606
# chacha20_c.c:47:         QUARTERROUND(3, 4, 9, 14);
	srliw	s10,t0,24	# tmp653, tmp650,
# chacha20_c.c:44:         QUARTERROUND(0, 5, 10, 15);
	slliw	a3,a3,8	#, tmp523, tmp518
# chacha20_c.c:47:         QUARTERROUND(3, 4, 9, 14);
	slliw	t0,t0,8	#, tmp655, tmp650
# chacha20_c.c:45:         QUARTERROUND(1, 6, 11, 12);
	srliw	a2,a4,24	# tmp565, tmp562,
# chacha20_c.c:44:         QUARTERROUND(0, 5, 10, 15);
	or	a5,s9,a3	# tmp523, x_I_lsm.19, tmp521
# chacha20_c.c:47:         QUARTERROUND(3, 4, 9, 14);
	or	a4,s10,t0	# tmp655, x_I_lsm.15, tmp653
# chacha20_c.c:45:         QUARTERROUND(1, 6, 11, 12);
	or	a2,a2,t2	# tmp567, x_I_lsm.7, tmp565
# chacha20_c.c:46:         QUARTERROUND(2, 7, 8, 13);
	or	a3,s8,t3	# tmp611, x_I_lsm.11, tmp609
	addw	t3,t1,a3	# x_I_lsm.11, x_I_lsm.8, tmp592
# chacha20_c.c:47:         QUARTERROUND(3, 4, 9, 14);
	addw	s1,s1,a4	# x_I_lsm.15, x_I_lsm.12, tmp636
# chacha20_c.c:44:         QUARTERROUND(0, 5, 10, 15);
	addw	s0,s0,a5	# x_I_lsm.19, x_I_lsm.16, tmp504
# chacha20_c.c:45:         QUARTERROUND(1, 6, 11, 12);
	addw	t5,t5,a2	# x_I_lsm.7, x_I_lsm.20, tmp548
	xor	a7,a7,t5	# x_I_lsm.20, tmp573, _86
# chacha20_c.c:47:         QUARTERROUND(3, 4, 9, 14);
	xor	a0,a0,s1	# x_I_lsm.12, tmp661, _110
# chacha20_c.c:44:         QUARTERROUND(0, 5, 10, 15);
	xor	a6,a6,s0	# x_I_lsm.16, tmp529, _74
# chacha20_c.c:46:         QUARTERROUND(2, 7, 8, 13);
	xor	t6,t6,t3	# x_I_lsm.8, tmp617, _98
# chacha20_c.c:47:         QUARTERROUND(3, 4, 9, 14);
	srliw	t1,a0,25	# tmp664, tmp661,
# chacha20_c.c:44:         QUARTERROUND(0, 5, 10, 15);
	srliw	s9,a6,25	# tmp532, tmp529,
# chacha20_c.c:47:         QUARTERROUND(3, 4, 9, 14);
	slliw	a0,a0,7	#, tmp666, tmp661
# chacha20_c.c:44:         QUARTERROUND(0, 5, 10, 15);
	slliw	a6,a6,7	#, tmp534, tmp529
# chacha20_c.c:45:         QUARTERROUND(1, 6, 11, 12);
	srliw	s8,a7,25	# tmp576, tmp573,
	slliw	t0,a7,7	#, tmp578, tmp573
# chacha20_c.c:46:         QUARTERROUND(2, 7, 8, 13);
	srliw	t2,t6,25	# tmp620, tmp617,
# chacha20_c.c:39:     for (i = 20; i > 0; i -= 2) {
	addiw	t4,t4,-1	#, ivtmp_606, ivtmp_606
# chacha20_c.c:46:         QUARTERROUND(2, 7, 8, 13);
	slliw	t6,t6,7	#, tmp622, tmp617
# chacha20_c.c:47:         QUARTERROUND(3, 4, 9, 14);
	or	t1,t1,a0	# tmp666, x_I_lsm.6, tmp664
# chacha20_c.c:44:         QUARTERROUND(0, 5, 10, 15);
	or	a7,s9,a6	# tmp534, x_I_lsm.10, tmp532
# chacha20_c.c:46:         QUARTERROUND(2, 7, 8, 13);
	or	a0,t2,t6	# tmp622, x_I_lsm.18, tmp620
# chacha20_c.c:45:         QUARTERROUND(1, 6, 11, 12);
	or	a6,s8,t0	# tmp578, x_I_lsm.14, tmp576
# chacha20_c.c:39:     for (i = 20; i > 0; i -= 2) {
	bne	t4,zero,.L4	#, ivtmp_606,,
# chacha20_c.c:51:         output->u[i] = x[i] + input[i];
	addw	s7,s7,s4	# x_I_lsm.5, tmp673, *input_131(D)
# chacha20_c.c:51:         output->u[i] = x[i] + input[i];
	sw	s7,0(s6)	# tmp673, output_132(D)->u[0]
# chacha20_c.c:51:         output->u[i] = x[i] + input[i];
	lw	t4,4(a1)		# MEM[(const u32 *)input_131(D) + 4B], MEM[(const u32 *)input_131(D) + 4B]
	addw	t4,t4,s3	# x_I_lsm.9, tmp677, MEM[(const u32 *)input_131(D) + 4B]
# chacha20_c.c:51:         output->u[i] = x[i] + input[i];
	sw	t4,4(s6)	# tmp677, output_132(D)->u[1]
# chacha20_c.c:51:         output->u[i] = x[i] + input[i];
	lw	t4,8(a1)		# MEM[(const u32 *)input_131(D) + 8B], MEM[(const u32 *)input_131(D) + 8B]
	addw	t4,t4,s2	# x_I_lsm.13, tmp681, MEM[(const u32 *)input_131(D) + 8B]
# chacha20_c.c:51:         output->u[i] = x[i] + input[i];
	sw	t4,8(s6)	# tmp681, output_132(D)->u[2]
# chacha20_c.c:51:         output->u[i] = x[i] + input[i];
	lw	t4,12(a1)		# MEM[(const u32 *)input_131(D) + 12B], MEM[(const u32 *)input_131(D) + 12B]
	addw	t4,t4,s5	# x_I_lsm.17, tmp685, MEM[(const u32 *)input_131(D) + 12B]
# chacha20_c.c:51:         output->u[i] = x[i] + input[i];
	sw	t4,12(s6)	# tmp685, output_132(D)->u[3]
# chacha20_c.c:51:         output->u[i] = x[i] + input[i];
	lw	t4,16(a1)		# MEM[(const u32 *)input_131(D) + 16B], MEM[(const u32 *)input_131(D) + 16B]
	addw	t1,t4,t1	# x_I_lsm.6, tmp689, MEM[(const u32 *)input_131(D) + 16B]
# chacha20_c.c:51:         output->u[i] = x[i] + input[i];
	sw	t1,16(s6)	# tmp689, output_132(D)->u[4]
# chacha20_c.c:51:         output->u[i] = x[i] + input[i];
	lw	t1,20(a1)		# MEM[(const u32 *)input_131(D) + 20B], MEM[(const u32 *)input_131(D) + 20B]
	addw	a7,t1,a7	# x_I_lsm.10, tmp693, MEM[(const u32 *)input_131(D) + 20B]
# chacha20_c.c:51:         output->u[i] = x[i] + input[i];
	sw	a7,20(s6)	# tmp693, output_132(D)->u[5]
# chacha20_c.c:51:         output->u[i] = x[i] + input[i];
	lw	a7,24(a1)		# MEM[(const u32 *)input_131(D) + 24B], MEM[(const u32 *)input_131(D) + 24B]
	addw	a6,a7,a6	# x_I_lsm.14, tmp697, MEM[(const u32 *)input_131(D) + 24B]
# chacha20_c.c:51:         output->u[i] = x[i] + input[i];
	sw	a6,24(s6)	# tmp697, output_132(D)->u[6]
# chacha20_c.c:51:         output->u[i] = x[i] + input[i];
	lw	a6,28(a1)		# MEM[(const u32 *)input_131(D) + 28B], MEM[(const u32 *)input_131(D) + 28B]
	addw	a0,a6,a0	# x_I_lsm.18, tmp701, MEM[(const u32 *)input_131(D) + 28B]
# chacha20_c.c:51:         output->u[i] = x[i] + input[i];
	sw	a0,28(s6)	# tmp701, output_132(D)->u[7]
# chacha20_c.c:51:         output->u[i] = x[i] + input[i];
	lw	a0,32(a1)		# MEM[(const u32 *)input_131(D) + 32B], MEM[(const u32 *)input_131(D) + 32B]
	addw	a0,a0,t3	# x_I_lsm.8, tmp705, MEM[(const u32 *)input_131(D) + 32B]
# chacha20_c.c:51:         output->u[i] = x[i] + input[i];
	sw	a0,32(s6)	# tmp705, output_132(D)->u[8]
# chacha20_c.c:51:         output->u[i] = x[i] + input[i];
	lw	a0,36(a1)		# MEM[(const u32 *)input_131(D) + 36B], MEM[(const u32 *)input_131(D) + 36B]
	addw	a0,a0,s1	# x_I_lsm.12, tmp709, MEM[(const u32 *)input_131(D) + 36B]
# chacha20_c.c:51:         output->u[i] = x[i] + input[i];
	sw	a0,36(s6)	# tmp709, output_132(D)->u[9]
# chacha20_c.c:51:         output->u[i] = x[i] + input[i];
	lw	a0,40(a1)		# MEM[(const u32 *)input_131(D) + 40B], MEM[(const u32 *)input_131(D) + 40B]
	addw	a0,a0,s0	# x_I_lsm.16, tmp713, MEM[(const u32 *)input_131(D) + 40B]
# chacha20_c.c:51:         output->u[i] = x[i] + input[i];
	sw	a0,40(s6)	# tmp713, output_132(D)->u[10]
# chacha20_c.c:51:         output->u[i] = x[i] + input[i];
	lw	a0,44(a1)		# MEM[(const u32 *)input_131(D) + 44B], MEM[(const u32 *)input_131(D) + 44B]
# chacha20_c.c:52: }
	ld	s0,152(sp)		#,
# chacha20_c.c:51:         output->u[i] = x[i] + input[i];
	addw	a0,a0,t5	# x_I_lsm.20, tmp717, MEM[(const u32 *)input_131(D) + 44B]
# chacha20_c.c:51:         output->u[i] = x[i] + input[i];
	sw	a0,44(s6)	# tmp717, output_132(D)->u[11]
# chacha20_c.c:51:         output->u[i] = x[i] + input[i];
	lw	a0,48(a1)		# MEM[(const u32 *)input_131(D) + 48B], MEM[(const u32 *)input_131(D) + 48B]
	addw	a2,a0,a2	# x_I_lsm.7, tmp721, MEM[(const u32 *)input_131(D) + 48B]
# chacha20_c.c:51:         output->u[i] = x[i] + input[i];
	sw	a2,48(s6)	# tmp721, output_132(D)->u[12]
# chacha20_c.c:51:         output->u[i] = x[i] + input[i];
	lw	a2,52(a1)		# MEM[(const u32 *)input_131(D) + 52B], MEM[(const u32 *)input_131(D) + 52B]
	addw	a3,a2,a3	# x_I_lsm.11, tmp725, MEM[(const u32 *)input_131(D) + 52B]
# chacha20_c.c:51:         output->u[i] = x[i] + input[i];
	sw	a3,52(s6)	# tmp725, output_132(D)->u[13]
# chacha20_c.c:51:         output->u[i] = x[i] + input[i];
	lw	a3,56(a1)		# MEM[(const u32 *)input_131(D) + 56B], MEM[(const u32 *)input_131(D) + 56B]
	addw	a4,a3,a4	# x_I_lsm.15, tmp729, MEM[(const u32 *)input_131(D) + 56B]
# chacha20_c.c:51:         output->u[i] = x[i] + input[i];
	sw	a4,56(s6)	# tmp729, output_132(D)->u[14]
# chacha20_c.c:51:         output->u[i] = x[i] + input[i];
	lw	a4,60(a1)		# MEM[(const u32 *)input_131(D) + 60B], MEM[(const u32 *)input_131(D) + 60B]
	addw	a5,a4,a5	# x_I_lsm.19, tmp733, MEM[(const u32 *)input_131(D) + 60B]
# chacha20_c.c:51:         output->u[i] = x[i] + input[i];
	sw	a5,60(s6)	# tmp733, output_132(D)->u[15]
# chacha20_c.c:52: }
	ld	s1,144(sp)		#,
	ld	s2,136(sp)		#,
	ld	s3,128(sp)		#,
	ld	s4,120(sp)		#,
	ld	s5,112(sp)		#,
	ld	s6,104(sp)		#,
	ld	s7,96(sp)		#,
	ld	s8,88(sp)		#,
	ld	s9,80(sp)		#,
	ld	s10,72(sp)		#,
	addi	sp,sp,160	#,,
	jr	ra		#
.L2:
# chacha20_c.c:36:         x[i] = input[i];
	lw	a4,4(a1)		# MEM[(const u32 *)input_131(D) + 4B], MEM[(const u32 *)input_131(D) + 4B]
	lw	a5,8(a1)		# MEM[(const u32 *)input_131(D) + 8B], MEM[(const u32 *)input_131(D) + 8B]
	lw	s7,0(a1)		# *input_131(D), *input_131(D)
	lw	t0,12(a1)		# MEM[(const u32 *)input_131(D) + 12B], MEM[(const u32 *)input_131(D) + 12B]
	lw	t6,16(a1)		# MEM[(const u32 *)input_131(D) + 16B], MEM[(const u32 *)input_131(D) + 16B]
	lw	t5,20(a1)		# MEM[(const u32 *)input_131(D) + 20B], MEM[(const u32 *)input_131(D) + 20B]
	lw	t4,24(a1)		# MEM[(const u32 *)input_131(D) + 24B], MEM[(const u32 *)input_131(D) + 24B]
	lw	t3,28(a1)		# MEM[(const u32 *)input_131(D) + 28B], MEM[(const u32 *)input_131(D) + 28B]
	lw	t1,32(a1)		# MEM[(const u32 *)input_131(D) + 32B], MEM[(const u32 *)input_131(D) + 32B]
	lw	a7,36(a1)		# MEM[(const u32 *)input_131(D) + 36B], MEM[(const u32 *)input_131(D) + 36B]
	lw	a6,40(a1)		# MEM[(const u32 *)input_131(D) + 40B], MEM[(const u32 *)input_131(D) + 40B]
	lw	a0,44(a1)		# MEM[(const u32 *)input_131(D) + 44B], MEM[(const u32 *)input_131(D) + 44B]
	lw	a2,48(a1)		# MEM[(const u32 *)input_131(D) + 48B], MEM[(const u32 *)input_131(D) + 48B]
	lw	a3,52(a1)		# MEM[(const u32 *)input_131(D) + 52B], MEM[(const u32 *)input_131(D) + 52B]
	sw	a4,4(sp)	# MEM[(const u32 *)input_131(D) + 4B], x[1]
	sw	a5,8(sp)	# MEM[(const u32 *)input_131(D) + 8B], x[2]
	lw	a4,56(a1)		# MEM[(const u32 *)input_131(D) + 56B], MEM[(const u32 *)input_131(D) + 56B]
	lw	a5,60(a1)		# MEM[(const u32 *)input_131(D) + 60B], MEM[(const u32 *)input_131(D) + 60B]
	sw	s7,0(sp)	# *input_131(D), x[0]
	sw	t0,12(sp)	# MEM[(const u32 *)input_131(D) + 12B], x[3]
	sw	t6,16(sp)	# MEM[(const u32 *)input_131(D) + 16B], x[4]
	sw	t5,20(sp)	# MEM[(const u32 *)input_131(D) + 20B], x[5]
	sw	t4,24(sp)	# MEM[(const u32 *)input_131(D) + 24B], x[6]
	sw	t3,28(sp)	# MEM[(const u32 *)input_131(D) + 28B], x[7]
	sw	t1,32(sp)	# MEM[(const u32 *)input_131(D) + 32B], x[8]
	sw	a7,36(sp)	# MEM[(const u32 *)input_131(D) + 36B], x[9]
	sw	a6,40(sp)	# MEM[(const u32 *)input_131(D) + 40B], x[10]
	sw	a0,44(sp)	# MEM[(const u32 *)input_131(D) + 44B], x[11]
	sw	a2,48(sp)	# MEM[(const u32 *)input_131(D) + 48B], x[12]
	sw	a3,52(sp)	# MEM[(const u32 *)input_131(D) + 52B], x[13]
	sw	a4,56(sp)	# MEM[(const u32 *)input_131(D) + 56B], x[14]
	sw	a5,60(sp)	# MEM[(const u32 *)input_131(D) + 60B], x[15]
	j	.L3		#
